version: '3.8'

services:
  # API Backend
  customhost-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: customhost-api-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - DATABASE_SERVER=db
      - DATABASE_NAME=customhost_production
      - DATABASE_USER=customhost_user
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - ./certs:/https:ro
      - ./logs:/app/logs
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - customhost-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de datos MySQL
  db:
    image: mysql:8.0
    container_name: customhost-db-prod
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=customhost_production
      - MYSQL_USER=customhost_user
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backup:/backup
    ports:
      - "3306:3306"
    restart: unless-stopped
    networks:
      - customhost-network
    command: --default-authentication-plugin=mysql_native_password

  # Nginx como reverse proxy (opcional pero recomendado)
  nginx:
    image: nginx:alpine
    container_name: customhost-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - customhost-api
    restart: unless-stopped
    networks:
      - customhost-network

volumes:
  mysql_data:
    driver: local

networks:
  customhost-network:
    driver: bridge
